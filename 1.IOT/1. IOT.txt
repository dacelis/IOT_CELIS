Daniel Celis 

Practica 1.

1. Una variable tipo double tiene un tamaño de 4 bytes, el mismo tamaño de una variable tipo float.
POdemos concluir que este tipo de variables son iguales y  esto efectivamente es una diferencia con C estandar.

2. 2.1 LiquidCrystal Library: Esta libreria permite controlar e interactuar con pantallas de cristal liquido (Compatibles con la Hitachi HD44780)
       Un ejemplo de esta libreria es el clasico "Hola Mundo" desplegado en un pantalla de cristal liquido.

   2.2 GSM Library: libreria que permite por medio de la red GSM, hacer muchas de las funciones que hace un telefono GSM.
       Un ejemplo interesante es el de poder hacer llamadas de voz por medio del arduino a traves de la red GSM. (Requiere un shield especial) 


   2.3 WiFi Library: Esta permite conectarse a internet por medio de la red WiFi
       Un ejemplo de esta libreria permite escanear la red y encontrar los dispositivos conectados a ella.

3. La estructura de un programa Arduino se divide en dos, una parte de setup y una parte de loop.

4. Setup: Esta funcion se llama cada que se alimenta el arduino o se reinicia y se hace ejecuta una sola vez, se usa para inicializar variables, modos del pin, las librerias a usar etc.
    
   Loop: Despues de ejecutar setup, esta funcion se ejecuta ciclicamente, permitiendo al programa cambiar y responder, controlando el Arduino.

5. 5.a La funcion setup se ejecuta una sola vez

   5.b La funcion loop se encuentra en un for infinito por tanto se ejecuta infinitamente desde que el Arduino este alimentado.

   5.c Archivos de programa/ Arduino / hardware / arduino / cores / arduino / main.cpp (Para arduino 1.0.5)
 
6. Boolean: ocupa 1 byte en memoria. Guarda un valor de verdadero o falso.
   
   Char: ocupa 1 byte en memoria. Guarda un valor caracter, este debe estar escrito entre comillas simples (Cada caracter es un numero codificado entre -128 hasta 127, usando el codigo ASCII).

   Unsigned char: ocupa 1 byte en memoria. Guarda valores entre 0 y 255 que representan un caracter.

   Byte: ocupa 1 byte. Recibe valores numericos entre 0 y 255

   Int: ocupa 2 bytes (4 bytes en otros Boards de Arduino). Guarda valores numericos entre -32768 hasta 32767 ciclico (Roll-over)

   Unsigned int: ocupa 2 bytes de memoria, almacena un numero en un rango entre 0 y 65535 ciclico (Roll-over)

   Word: ocupa 2 bytes de memoria, almacena un número rango entre 0 y 65535 como el unsigned int

   Long: Ocupa 4 bytes de memoria, almacena un numeró 2,147,483,648 to 2,147,483,647.

   Unsigned long: Ocupa 4 bytes. Almacena un numero entre 0 to 4,294,967,295

   Float: ocupa 4 bytes. Almacena un numero decimal entre -3.4028235E+38 y 3.4028235E+38

   Double: Ocupa 4 bytes. Tiene las  mismas características de un dato float

   String(char array): ocupa 4 bytes. Almacena una cadena de caracteres 

   String(objects): No ocupa un tamaño en memoria definido. Almacena una cadena de caracteres, pero agrega mejores características para manipular estas, por ejemplo concatenar arreglos, reemplazar subcandenas, buscarlas entre otros.

   Array: ocupa un tamaño en memoria definido. Crea un arreglo (vector) de caracteres o de enteros.

   Void: No ocupa tamaño en memoria. Es un palabra clave para declarar funciones

7. El terminar un string en null (representado por el código ascii 0) es importante para que en las comunicación deje de enviarse caracteres en el momento que termine de escribir mi cadena, de lo contrario seguirá enviando caracteres de espacios de memoria subsecuentes que no son parte de la cadena de caracteres.

8. Los números del 0 al 9 están representados por los códigos ascii del 48 al 57

10. 



